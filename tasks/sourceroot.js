// Generated by CoffeeScript 1.7.1
(function() {
  module.exports = function(grunt) {
    var chalk, path, _;
    path = require('path');
    _ = require('underscore');
    chalk = require('chalk');
    return grunt.registerMultiTask('sourceroot', function(target) {
      var options, sourceroot;
      options = this.options({
        sourceroot: 'app'
      });
      sourceroot = new RegExp("^" + options.sourceroot);
      return this.files.forEach(function(file) {
        var files, maps;
        files = grunt.file.expand(file.src);
        return maps = _(files).chain().map(function(dest) {
          return _.extend({
            src: dest
          }, {
            dest: dest.replace(file.src, file.dest)
          }, grunt.file.readJSON(dest + '.map'), {
            file: path.basename(dest)
          });
        }).map(function(sourcemap) {
          return _(sourcemap).tap(function(_arg) {
            var i, s, sources, _i, _len, _results;
            sources = _arg.sources;
            _results = [];
            for (i = _i = 0, _len = sources.length; _i < _len; i = ++_i) {
              s = sources[i];
              _results.push(sources[i] = s.replace(sourceroot, ''));
            }
            return _results;
          });
        }).map(function(sourcemap) {
          grunt.file.copy(sourcemap.src, sourcemap.dest);
          grunt.log.writeln("<- " + (chalk.cyan(sourcemap.src)));
          grunt.log.writeln("-> " + (chalk.green(sourcemap.dest)));
          grunt.file.write(sourcemap.dest + '.map', JSON.stringify(sourcemap));
          grunt.log.writeln("<- " + (chalk.cyan("" + sourcemap.src + ".map")));
          grunt.log.writeln("-> " + (chalk.green("" + sourcemap.dest + ".map")));
          return grunt.log.writeln('');
        }).value();
      });
    });
  };

}).call(this);
